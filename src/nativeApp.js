webpackJsonp([2],[
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar React = __webpack_require__(1);\nvar ReactDOM = __webpack_require__(34);\n\nvar _require = __webpack_require__(194),\n    View = _require.View;\n\nvar _require2 = __webpack_require__(202),\n    components = _require2.components;\n\nvar Keypad = components.Keypad,\n    KeypadInput = components.KeypadInput;\n\nvar KeyConfigs = __webpack_require__(302);\n\nvar ManualInput = function ManualInput(_ref) {\n    var handler = _ref.handler;\n\n    return React.createElement('div', null, Object.keys(KeyConfigs).map(function (k) {\n        return React.createElement('button', { style: { display: \"block\" }, disabled: !handler, onClick: function onClick() {\n                return handler(k);\n            } }, k, ' : ', KeyConfigs[k].ariaLabel);\n    }));\n};\n\nvar App = function (_React$Component) {\n    _inherits(App, _React$Component);\n\n    function App() {\n        var _ref2;\n\n        var _temp, _this, _ret;\n\n        _classCallCheck(this, App);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = App.__proto__ || Object.getPrototypeOf(App)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {\n            active: false,\n            handler: null,\n            keypadElement: {\n                activate: function activate() {\n                    return _this.setState({ active: true });\n                },\n                dismiss: function dismiss() {\n                    return _this.setState({ active: false });\n                },\n                configure: function configure(config) {\n                    return console.log(\"configure:\", config);\n                },\n                setCursor: function setCursor(cursor) {\n                    return console.log(\"Cursor:\", cursor);\n                },\n                setKeyHandler: function setKeyHandler(handler) {\n                    return _this.setState({ handler: handler });\n                },\n                getDOMNode: function getDOMNode() {\n                    return null;\n                }\n            },\n            value: \"\"\n        }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(App, [{\n        key: 'render',\n        value: function render() {\n            var _this2 = this;\n\n            return React.createElement(View, null, React.createElement('div', {\n                style: {\n                    marginTop: 10,\n                    marginLeft: 20,\n                    marginRight: 20,\n                    marginBottom: 40\n                }\n            }, React.createElement(KeypadInput, {\n                value: this.state.value,\n                ref: function ref(inp) {\n                    return _this2.inp = inp;\n                },\n                keypadElement: this.state.keypadElement,\n                onChange: function onChange(value, cb) {\n                    return _this2.setState({ value: value }, cb);\n                },\n                onFocus: function onFocus() {\n                    return _this2.state.keypadElement.activate();\n                },\n                onBlur: function onBlur() {\n                    return _this2.state.keypadElement.dismiss();\n                }\n            })), React.createElement('div', null, React.createElement('button', { style: { display: 'block' }, onClick: function onClick() {\n                    return _this2.inp.focus();\n                } }, 'Focus')), React.createElement('div', { style: { padding: 20 } }, 'Handler assigned: ', \"\" + !!this.state.handler, React.createElement('br', null), 'Active: ', \"\" + this.state.active), React.createElement('br', null), React.createElement('br', null), React.createElement(ManualInput, { handler: this.state.handler }));\n        }\n    }]);\n\n    return App;\n}(React.Component);\n\nReactDOM.render(React.createElement(App, null), document.getElementById('root'));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ })
]);